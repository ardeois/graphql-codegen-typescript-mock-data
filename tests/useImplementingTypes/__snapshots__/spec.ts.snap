// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should support useImplementingTypes 1`] = `
"
export const mockAConfig = (overrides?: Partial<AConfig>): AConfig => {
    return {
        testTypes: [TestObj.Test],
        ...overrides,
    };
};

export const mockField = (overrides?: Partial<Field>): Field => {
    return {
        testTypes: [TestObj.Test],
        ...overrides,
    };
};

export const mockAction = (overrides?: Partial<Action>): Action => {
    return {
        action: [TestObj.Test],
        ...overrides,
    };
};

export const mockA = (overrides?: Partial<A>): A => {
    return {
        id: 'cae147b0-1c04-459e-82db-624dd87433b4',
        str: 'ea',
        obj: mockB(),
        config: mockTestAConfig() || mockTestTwoAConfig(),
        configArray: [mockTestAConfig() || mockTestTwoAConfig()],
        field: mockTestTwoAConfig(),
        action: mockTestAction(),
        ...overrides,
    };
};

export const mockB = (overrides?: Partial<B>): B => {
    return {
        int: 696,
        flt: 7.55,
        bool: false,
        ...overrides,
    };
};

export const mockTestAConfig = (overrides?: Partial<TestAConfig>): TestAConfig => {
    return {
        testTypes: [TestObj.Test],
        active: true,
        ...overrides,
    };
};

export const mockTestTwoAConfig = (overrides?: Partial<TestTwoAConfig>): TestTwoAConfig => {
    return {
        testTypes: [TestObj.Test],
        username: 'et',
        ...overrides,
    };
};

export const mockTestAction = (overrides?: Partial<TestAction>): TestAction => {
    return {
        action: [TestObj.Test],
        createdAt: 'voluptate',
        ...overrides,
    };
};
"
`;

exports[`shouldn't support useImplementingTypes 1`] = `
"
export const mockAConfig = (overrides?: Partial<AConfig>): AConfig => {
    return {
        testTypes: [TestObj.Test],
        ...overrides,
    };
};

export const mockField = (overrides?: Partial<Field>): Field => {
    return {
        testTypes: [TestObj.Test],
        ...overrides,
    };
};

export const mockAction = (overrides?: Partial<Action>): Action => {
    return {
        action: [TestObj.Test],
        ...overrides,
    };
};

export const mockA = (overrides?: Partial<A>): A => {
    return {
        id: 'cae147b0-1c04-459e-82db-624dd87433b4',
        str: 'ea',
        obj: mockB(),
        config: mockAConfig(),
        configArray: [mockAConfig()],
        field: mockField(),
        action: mockAction(),
        ...overrides,
    };
};

export const mockB = (overrides?: Partial<B>): B => {
    return {
        int: 696,
        flt: 7.55,
        bool: false,
        ...overrides,
    };
};

export const mockTestAConfig = (overrides?: Partial<TestAConfig>): TestAConfig => {
    return {
        testTypes: [TestObj.Test],
        active: true,
        ...overrides,
    };
};

export const mockTestTwoAConfig = (overrides?: Partial<TestTwoAConfig>): TestTwoAConfig => {
    return {
        testTypes: [TestObj.Test],
        username: 'et',
        ...overrides,
    };
};

export const mockTestAction = (overrides?: Partial<TestAction>): TestAction => {
    return {
        action: [TestObj.Test],
        createdAt: 'voluptate',
        ...overrides,
    };
};
"
`;

exports[`support useImplementingTypes with fieldGeneration prop 1`] = `
"
export const mockAConfig = (overrides?: Partial<AConfig>): AConfig => {
    return {
        testTypes: [TestObj.Test],
        ...overrides,
    };
};

export const mockField = (overrides?: Partial<Field>): Field => {
    return {
        testTypes: [TestObj.Test],
        ...overrides,
    };
};

export const mockAction = (overrides?: Partial<Action>): Action => {
    return {
        action: [TestObj.Test],
        ...overrides,
    };
};

export const mockA = (overrides?: Partial<A>): A => {
    return {
        id: 'cae147b0-1c04-459e-82db-624dd87433b4',
        str: 'ea',
        obj: mockB(),
        config: 'Karelle_Kassulke@Carolyne.io',
        configArray: [mockTestAConfig() || mockTestTwoAConfig()],
        field: mockTestTwoAConfig(),
        action: mockTestAction(),
        ...overrides,
    };
};

export const mockB = (overrides?: Partial<B>): B => {
    return {
        int: 696,
        flt: 7.55,
        bool: false,
        ...overrides,
    };
};

export const mockTestAConfig = (overrides?: Partial<TestAConfig>): TestAConfig => {
    return {
        testTypes: [TestObj.Test],
        active: true,
        ...overrides,
    };
};

export const mockTestTwoAConfig = (overrides?: Partial<TestTwoAConfig>): TestTwoAConfig => {
    return {
        testTypes: [TestObj.Test],
        username: 'et',
        ...overrides,
    };
};

export const mockTestAction = (overrides?: Partial<TestAction>): TestAction => {
    return {
        action: [TestObj.Test],
        createdAt: 'voluptate',
        ...overrides,
    };
};
"
`;
