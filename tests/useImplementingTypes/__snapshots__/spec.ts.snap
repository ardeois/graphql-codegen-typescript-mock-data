// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should support useImplementingTypes 1`] = `
"
export const mockAConfig = (overrides?: Partial<AConfig>): AConfig => {
    return {
        testTypes: overrides && overrides.hasOwnProperty('testTypes') ? overrides.testTypes! : [TestObj.Test],
    };
};

export const mockField = (overrides?: Partial<Field>): Field => {
    return {
        testTypes: overrides && overrides.hasOwnProperty('testTypes') ? overrides.testTypes! : [TestObj.Test],
    };
};

export const mockAction = (overrides?: Partial<Action>): Action => {
    return {
        action: overrides && overrides.hasOwnProperty('action') ? overrides.action! : [TestObj.Test],
    };
};

export const mockA = (overrides?: Partial<A>): A => {
    return {
        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'cae147b0-1c04-459e-82db-624dd87433b4',
        str: overrides && overrides.hasOwnProperty('str') ? overrides.str! : 'ea',
        obj: overrides && overrides.hasOwnProperty('obj') ? overrides.obj! : mockB(),
        config: overrides && overrides.hasOwnProperty('config') ? overrides.config! : mockTestAConfig() || mockTestTwoAConfig(),
        configArray: overrides && overrides.hasOwnProperty('configArray') ? overrides.configArray! : [mockTestAConfig() || mockTestTwoAConfig()],
        field: overrides && overrides.hasOwnProperty('field') ? overrides.field! : mockTestTwoAConfig(),
        action: overrides && overrides.hasOwnProperty('action') ? overrides.action! : mockTestAction(),
    };
};

export const mockB = (overrides?: Partial<B>): B => {
    return {
        int: overrides && overrides.hasOwnProperty('int') ? overrides.int! : 696,
        flt: overrides && overrides.hasOwnProperty('flt') ? overrides.flt! : 7.55,
        bool: overrides && overrides.hasOwnProperty('bool') ? overrides.bool! : false,
    };
};

export const mockTestAConfig = (overrides?: Partial<TestAConfig>): TestAConfig => {
    return {
        testTypes: overrides && overrides.hasOwnProperty('testTypes') ? overrides.testTypes! : [TestObj.Test],
        active: overrides && overrides.hasOwnProperty('active') ? overrides.active! : true,
    };
};

export const mockTestTwoAConfig = (overrides?: Partial<TestTwoAConfig>): TestTwoAConfig => {
    return {
        testTypes: overrides && overrides.hasOwnProperty('testTypes') ? overrides.testTypes! : [TestObj.Test],
        username: overrides && overrides.hasOwnProperty('username') ? overrides.username! : 'et',
    };
};

export const mockTestAction = (overrides?: Partial<TestAction>): TestAction => {
    return {
        action: overrides && overrides.hasOwnProperty('action') ? overrides.action! : [TestObj.Test],
        createdAt: overrides && overrides.hasOwnProperty('createdAt') ? overrides.createdAt! : 'voluptate',
    };
};
"
`;

exports[`shouldn't support useImplementingTypes 1`] = `
"
export const mockAConfig = (overrides?: Partial<AConfig>): AConfig => {
    return {
        testTypes: overrides && overrides.hasOwnProperty('testTypes') ? overrides.testTypes! : [TestObj.Test],
    };
};

export const mockField = (overrides?: Partial<Field>): Field => {
    return {
        testTypes: overrides && overrides.hasOwnProperty('testTypes') ? overrides.testTypes! : [TestObj.Test],
    };
};

export const mockAction = (overrides?: Partial<Action>): Action => {
    return {
        action: overrides && overrides.hasOwnProperty('action') ? overrides.action! : [TestObj.Test],
    };
};

export const mockA = (overrides?: Partial<A>): A => {
    return {
        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'cae147b0-1c04-459e-82db-624dd87433b4',
        str: overrides && overrides.hasOwnProperty('str') ? overrides.str! : 'ea',
        obj: overrides && overrides.hasOwnProperty('obj') ? overrides.obj! : mockB(),
        config: overrides && overrides.hasOwnProperty('config') ? overrides.config! : mockAConfig(),
        configArray: overrides && overrides.hasOwnProperty('configArray') ? overrides.configArray! : [mockAConfig()],
        field: overrides && overrides.hasOwnProperty('field') ? overrides.field! : mockField(),
        action: overrides && overrides.hasOwnProperty('action') ? overrides.action! : mockAction(),
    };
};

export const mockB = (overrides?: Partial<B>): B => {
    return {
        int: overrides && overrides.hasOwnProperty('int') ? overrides.int! : 696,
        flt: overrides && overrides.hasOwnProperty('flt') ? overrides.flt! : 7.55,
        bool: overrides && overrides.hasOwnProperty('bool') ? overrides.bool! : false,
    };
};

export const mockTestAConfig = (overrides?: Partial<TestAConfig>): TestAConfig => {
    return {
        testTypes: overrides && overrides.hasOwnProperty('testTypes') ? overrides.testTypes! : [TestObj.Test],
        active: overrides && overrides.hasOwnProperty('active') ? overrides.active! : true,
    };
};

export const mockTestTwoAConfig = (overrides?: Partial<TestTwoAConfig>): TestTwoAConfig => {
    return {
        testTypes: overrides && overrides.hasOwnProperty('testTypes') ? overrides.testTypes! : [TestObj.Test],
        username: overrides && overrides.hasOwnProperty('username') ? overrides.username! : 'et',
    };
};

export const mockTestAction = (overrides?: Partial<TestAction>): TestAction => {
    return {
        action: overrides && overrides.hasOwnProperty('action') ? overrides.action! : [TestObj.Test],
        createdAt: overrides && overrides.hasOwnProperty('createdAt') ? overrides.createdAt! : 'voluptate',
    };
};
"
`;

exports[`support useImplementingTypes with fieldGeneration prop 1`] = `
"
export const mockAConfig = (overrides?: Partial<AConfig>): AConfig => {
    return {
        testTypes: overrides && overrides.hasOwnProperty('testTypes') ? overrides.testTypes! : [TestObj.Test],
    };
};

export const mockField = (overrides?: Partial<Field>): Field => {
    return {
        testTypes: overrides && overrides.hasOwnProperty('testTypes') ? overrides.testTypes! : [TestObj.Test],
    };
};

export const mockAction = (overrides?: Partial<Action>): Action => {
    return {
        action: overrides && overrides.hasOwnProperty('action') ? overrides.action! : [TestObj.Test],
    };
};

export const mockA = (overrides?: Partial<A>): A => {
    return {
        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'cae147b0-1c04-459e-82db-624dd87433b4',
        str: overrides && overrides.hasOwnProperty('str') ? overrides.str! : 'ea',
        obj: overrides && overrides.hasOwnProperty('obj') ? overrides.obj! : mockB(),
        config: overrides && overrides.hasOwnProperty('config') ? overrides.config! : 'Karelle_Kassulke@Carolyne.io',
        configArray: overrides && overrides.hasOwnProperty('configArray') ? overrides.configArray! : [mockTestAConfig() || mockTestTwoAConfig()],
        field: overrides && overrides.hasOwnProperty('field') ? overrides.field! : mockTestTwoAConfig(),
        action: overrides && overrides.hasOwnProperty('action') ? overrides.action! : mockTestAction(),
    };
};

export const mockB = (overrides?: Partial<B>): B => {
    return {
        int: overrides && overrides.hasOwnProperty('int') ? overrides.int! : 696,
        flt: overrides && overrides.hasOwnProperty('flt') ? overrides.flt! : 7.55,
        bool: overrides && overrides.hasOwnProperty('bool') ? overrides.bool! : false,
    };
};

export const mockTestAConfig = (overrides?: Partial<TestAConfig>): TestAConfig => {
    return {
        testTypes: overrides && overrides.hasOwnProperty('testTypes') ? overrides.testTypes! : [TestObj.Test],
        active: overrides && overrides.hasOwnProperty('active') ? overrides.active! : true,
    };
};

export const mockTestTwoAConfig = (overrides?: Partial<TestTwoAConfig>): TestTwoAConfig => {
    return {
        testTypes: overrides && overrides.hasOwnProperty('testTypes') ? overrides.testTypes! : [TestObj.Test],
        username: overrides && overrides.hasOwnProperty('username') ? overrides.username! : 'et',
    };
};

export const mockTestAction = (overrides?: Partial<TestAction>): TestAction => {
    return {
        action: overrides && overrides.hasOwnProperty('action') ? overrides.action! : [TestObj.Test],
        createdAt: overrides && overrides.hasOwnProperty('createdAt') ? overrides.createdAt! : 'voluptate',
    };
};
"
`;
