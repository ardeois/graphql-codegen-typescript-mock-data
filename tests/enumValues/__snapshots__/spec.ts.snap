// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`enumValues config having 'change-case-all#pascalCase' value should keep underscores for type name only if 'transformUnderscore' is false 1`] = `
"
export const aMyType = (overrides?: Partial<MyType>): MyType => {
    return {
        underscoreEnum: UnderscoreEnum.Id,
        pascalCaseEnum: PascalCaseEnum.PascalCase,
        camelCaseEnum: CamelCaseEnum.CamelCase,
        snakeCaseEnum: SnakeCaseEnum.SnakeCase,
        screamingSnakeCaseEnum: ScreamingSnakeCaseEnum.ScreamingSnakeCase,
        pascalCase_withUnderscore: PascalCase_WithUnderscore.OtherSnakeCase,
        ...overrides,
    };
};
"
`;

exports[`enumValues config having 'change-case-all#pascalCase' value should keep underscores if 'transformUnderscore' is false and 'enumsAsTypes' is true 1`] = `
"
export const aMyType = (overrides?: Partial<MyType>): MyType => {
    return {
        underscoreEnum: '_id',
        pascalCaseEnum: 'PascalCase',
        camelCaseEnum: 'camelCase',
        snakeCaseEnum: 'snake_case',
        screamingSnakeCaseEnum: 'SCREAMING_SNAKE_CASE',
        pascalCase_withUnderscore: 'other_snake_case',
        ...overrides,
    };
};
"
`;

exports[`enumValues config having 'change-case-all#pascalCase' value should update case in pascal case 1`] = `
"
export const aMyType = (overrides?: Partial<MyType>): MyType => {
    return {
        underscoreEnum: UnderscoreEnum.Id,
        pascalCaseEnum: PascalCaseEnum.PascalCase,
        camelCaseEnum: CamelCaseEnum.CamelCase,
        snakeCaseEnum: SnakeCaseEnum.SnakeCase,
        screamingSnakeCaseEnum: ScreamingSnakeCaseEnum.ScreamingSnakeCase,
        pascalCase_withUnderscore: PascalCaseWithUnderscore.OtherSnakeCase,
        ...overrides,
    };
};
"
`;

exports[`enumValues config having 'change-case-all#upperCase' value should keep underscores if 'transformUnderscore' is false 1`] = `
"
export const aMyType = (overrides?: Partial<MyType>): MyType => {
    return {
        underscoreEnum: UnderscoreEnum._ID,
        pascalCaseEnum: PascalCaseEnum.PASCALCASE,
        camelCaseEnum: CamelCaseEnum.CAMELCASE,
        snakeCaseEnum: SnakeCaseEnum.SNAKE_CASE,
        screamingSnakeCaseEnum: ScreamingSnakeCaseEnum.SCREAMING_SNAKE_CASE,
        pascalCase_withUnderscore: PascalCase_WithUnderscore.OTHER_SNAKE_CASE,
        ...overrides,
    };
};
"
`;

exports[`enumValues config having 'change-case-all#upperCase' value should keep underscores if 'transformUnderscore' is false and 'enumsAsTypes' is true 1`] = `
"
export const aMyType = (overrides?: Partial<MyType>): MyType => {
    return {
        underscoreEnum: '_id',
        pascalCaseEnum: 'PascalCase',
        camelCaseEnum: 'camelCase',
        snakeCaseEnum: 'snake_case',
        screamingSnakeCaseEnum: 'SCREAMING_SNAKE_CASE',
        pascalCase_withUnderscore: 'other_snake_case',
        ...overrides,
    };
};
"
`;

exports[`enumValues config having 'change-case-all#upperCase' value should update case in upper case 1`] = `
"
export const aMyType = (overrides?: Partial<MyType>): MyType => {
    return {
        underscoreEnum: UnderscoreEnum._ID,
        pascalCaseEnum: PascalCaseEnum.PASCALCASE,
        camelCaseEnum: CamelCaseEnum.CAMELCASE,
        snakeCaseEnum: SnakeCaseEnum.SNAKE_CASE,
        screamingSnakeCaseEnum: ScreamingSnakeCaseEnum.SCREAMING_SNAKE_CASE,
        pascalCase_withUnderscore: PascalCaseWithUnderscore.OTHER_SNAKE_CASE,
        ...overrides,
    };
};
"
`;

exports[`enumValues config having 'keep' value should have effect on enum type only if 'transformUnderscore' is false 1`] = `
"
export const aMyType = (overrides?: Partial<MyType>): MyType => {
    return {
        underscoreEnum: UnderscoreEnum._id,
        pascalCaseEnum: PascalCaseEnum.PascalCase,
        camelCaseEnum: CamelCaseEnum.camelCase,
        snakeCaseEnum: SnakeCaseEnum.snake_case,
        screamingSnakeCaseEnum: ScreamingSnakeCaseEnum.SCREAMING_SNAKE_CASE,
        pascalCase_withUnderscore: PascalCase_WithUnderscore.other_snake_case,
        ...overrides,
    };
};
"
`;

exports[`enumValues config having 'keep' value should have no effect if 'transformUnderscore' is false and 'enumsAsTypes' is true 1`] = `
"
export const aMyType = (overrides?: Partial<MyType>): MyType => {
    return {
        underscoreEnum: '_id',
        pascalCaseEnum: 'PascalCase',
        camelCaseEnum: 'camelCase',
        snakeCaseEnum: 'snake_case',
        screamingSnakeCaseEnum: 'SCREAMING_SNAKE_CASE',
        pascalCase_withUnderscore: 'other_snake_case',
        ...overrides,
    };
};
"
`;

exports[`enumValues config having 'keep' value should keep case 1`] = `
"
export const aMyType = (overrides?: Partial<MyType>): MyType => {
    return {
        underscoreEnum: UnderscoreEnum._id,
        pascalCaseEnum: PascalCaseEnum.PascalCase,
        camelCaseEnum: CamelCaseEnum.camelCase,
        snakeCaseEnum: SnakeCaseEnum.snake_case,
        screamingSnakeCaseEnum: ScreamingSnakeCaseEnum.SCREAMING_SNAKE_CASE,
        pascalCase_withUnderscore: PascalCaseWithUnderscore.other_snake_case,
        ...overrides,
    };
};
"
`;

exports[`enumValues config having default value should keep underscores for enum type only if 'transformUnderscore' is false 1`] = `
"
export const aMyType = (overrides?: Partial<MyType>): MyType => {
    return {
        underscoreEnum: UnderscoreEnum.Id,
        pascalCaseEnum: PascalCaseEnum.PascalCase,
        camelCaseEnum: CamelCaseEnum.CamelCase,
        snakeCaseEnum: SnakeCaseEnum.SnakeCase,
        screamingSnakeCaseEnum: ScreamingSnakeCaseEnum.ScreamingSnakeCase,
        pascalCase_withUnderscore: PascalCase_WithUnderscore.OtherSnakeCase,
        ...overrides,
    };
};
"
`;

exports[`enumValues config having default value should keep underscores if 'transformUnderscore' is false and 'enumsAsTypes' is true 1`] = `
"
export const aMyType = (overrides?: Partial<MyType>): MyType => {
    return {
        underscoreEnum: '_id',
        pascalCaseEnum: 'PascalCase',
        camelCaseEnum: 'camelCase',
        snakeCaseEnum: 'snake_case',
        screamingSnakeCaseEnum: 'SCREAMING_SNAKE_CASE',
        pascalCase_withUnderscore: 'other_snake_case',
        ...overrides,
    };
};
"
`;

exports[`enumValues config having default value should update case in pascal case 1`] = `
"
export const aMyType = (overrides?: Partial<MyType>): MyType => {
    return {
        underscoreEnum: UnderscoreEnum.Id,
        pascalCaseEnum: PascalCaseEnum.PascalCase,
        camelCaseEnum: CamelCaseEnum.CamelCase,
        snakeCaseEnum: SnakeCaseEnum.SnakeCase,
        screamingSnakeCaseEnum: ScreamingSnakeCaseEnum.ScreamingSnakeCase,
        pascalCase_withUnderscore: PascalCaseWithUnderscore.OtherSnakeCase,
        ...overrides,
    };
};
"
`;
