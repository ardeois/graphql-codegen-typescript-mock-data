// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should add custom prefix if the \`prefix\` config option is specified 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const mockAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const mockUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : mockAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : mockCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : mockAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const mockWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : mockAvatar({}, attributesSelectionSet?.avatar),};
    };
export const mockCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const mockPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const mockAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const mockListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const mockUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : mockAvatar({}, attributesSelectionSet?.avatar),};
    };
export const mockMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : mockUser({}, attributesSelectionSet?.updateUser),};
    };
export const mockQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : mockUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : mockPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should add enumsPrefix to all enums when option is specified 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Api.Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : Api.AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : Api.PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should add enumsPrefix to imports 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
import { Avatar, User, WithAvatar, CamelCaseThing, PrefixedResponse, AbcType, ListType, UpdateUserInput, Mutation, Query, Api } from './types/graphql';
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Api.Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : Api.AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : Api.PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should add typesPrefix and enumsPrefix to imports 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
import { Api } from './types/graphql';
export const anAvatar = (overrides?: Partial<Api.Avatar>, _selectionSet?: SelectionSetNode): Api.Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<Api.User>, _selectionSet?: SelectionSetNode): Api.User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Api.Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : Api.AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : Api.PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<Api.WithAvatar>, _selectionSet?: SelectionSetNode): Api.WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<Api.CamelCaseThing>, _selectionSet?: SelectionSetNode): Api.CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<Api.PrefixedResponse>, _selectionSet?: SelectionSetNode): Api.PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<Api.AbcType>, _selectionSet?: SelectionSetNode): Api.AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<Api.ListType>, _selectionSet?: SelectionSetNode): Api.ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<Api.UpdateUserInput>, _selectionSet?: SelectionSetNode): Api.UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Api.Mutation>, _selectionSet?: SelectionSetNode): Api.Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Api.Query>, queryDocument?: DocumentNode): Api.Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should add typesPrefix to all types when option is specified 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Api.Avatar>, _selectionSet?: SelectionSetNode): Api.Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<Api.User>, _selectionSet?: SelectionSetNode): Api.User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<Api.WithAvatar>, _selectionSet?: SelectionSetNode): Api.WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<Api.CamelCaseThing>, _selectionSet?: SelectionSetNode): Api.CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<Api.PrefixedResponse>, _selectionSet?: SelectionSetNode): Api.PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<Api.AbcType>, _selectionSet?: SelectionSetNode): Api.AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<Api.ListType>, _selectionSet?: SelectionSetNode): Api.ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<Api.UpdateUserInput>, _selectionSet?: SelectionSetNode): Api.UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Api.Mutation>, _selectionSet?: SelectionSetNode): Api.Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Api.Query>, queryDocument?: DocumentNode): Api.Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should add typesPrefix to imports 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
import { Api, AbcStatus, Status, PrefixedEnum } from './types/graphql';
export const anAvatar = (overrides?: Partial<Api.Avatar>, _selectionSet?: SelectionSetNode): Api.Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<Api.User>, _selectionSet?: SelectionSetNode): Api.User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<Api.WithAvatar>, _selectionSet?: SelectionSetNode): Api.WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<Api.CamelCaseThing>, _selectionSet?: SelectionSetNode): Api.CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<Api.PrefixedResponse>, _selectionSet?: SelectionSetNode): Api.PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<Api.AbcType>, _selectionSet?: SelectionSetNode): Api.AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<Api.ListType>, _selectionSet?: SelectionSetNode): Api.ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<Api.UpdateUserInput>, _selectionSet?: SelectionSetNode): Api.UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Api.Mutation>, _selectionSet?: SelectionSetNode): Api.Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Api.Query>, queryDocument?: DocumentNode): Api.Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should correctly generate the \`casual\` data for a function with arguments scalar mapping 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : '1977-06-26',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should correctly generate the \`casual\` data for a function with one argument scalar mapping 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : '1977-06-26',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should correctly generate the \`casual\` data for a non-string scalar mapping 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : [41,98,185],
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should correctly generate the \`casual\` data for a scalar mapping of type string 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'Mohamed.Nader@Kiehn.io',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should correctly use custom generator as default value 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : myValueGenerator(),
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should generate dynamic values in mocks 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
import casual from 'casual';

casual.seed(0);
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : casual.uuid,
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : casual.word,};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : casual.uuid,
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : new Date(casual.unix_time).toISOString(),
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : casual.word,
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : casual.word,
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : casual.uuid,
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : casual.uuid,};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : casual.word,};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : casual.word,};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : [casual.word],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : casual.uuid,
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : casual.word,
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };

export const seedMocks = (seed: number) => casual.seed(seed);
"
`;

exports[`should generate dynamic values with faker 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
import { faker } from '@faker-js/faker';

faker.seed(0);
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : faker.datatype.uuid(),
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : faker.lorem.word(),};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : faker.datatype.uuid(),
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : faker.date.past(1, new Date(2022, 0)).toISOString(),
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : faker.lorem.word(),
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : faker.lorem.word(),
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : faker.datatype.uuid(),
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : faker.datatype.uuid(),};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : faker.lorem.word(),};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : faker.lorem.word(),};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : [faker.lorem.word()],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : faker.datatype.uuid(),
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : faker.lorem.word(),
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };

export const seedMocks = (seed: number) => faker.seed(seed);
"
`;

exports[`should generate mock data functions 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should generate mock data functions with casual 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should generate mock data functions with external types file import 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
import { Avatar, User, WithAvatar, CamelCaseThing, PrefixedResponse, AbcType, ListType, UpdateUserInput, Mutation, Query, AbcStatus, Status, PrefixedEnum } from './types/graphql';
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should generate mock data functions with faker 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1550ff93-cd31-49b4-bc38-ef1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'b5756f00-51a6-422a-9a7d-c13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '2021-06-27T14:29:24.774Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '99f515e7-21e0-461d-8230-d4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '245b9cf9-10fa-4974-900f-beee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0d6a9360-d92b-4660-9e5f-14155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'eos',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should generate mock data functions with scalars 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should generate mock data with PascalCase enum values by default 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should generate mock data with PascalCase enum values if enumValues is "pascal-case#pascalCase" 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should generate mock data with PascalCase enum values if typenames is "pascal-case#pascalCase" 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should generate mock data with PascalCase types and enums by default 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
import { Avatar, User, WithAvatar, CamelCaseThing, PrefixedResponse, AbcType, ListType, UpdateUserInput, Mutation, Query, AbcStatus, Status, PrefixedEnum } from './types/graphql';
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should generate mock data with as-is enum values if enumValues is "keep" 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.ONLINE,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.hasXYZStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PREFIXED_VALUE,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should generate mock data with as-is types and enums if typenames is "keep" 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : ABCStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as camelCaseThing : acamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : Prefixed_Enum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const acamelCaseThing = (overrides?: Partial<camelCaseThing>, _selectionSet?: SelectionSetNode): camelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixed_Response = (overrides?: Partial<Prefixed_Response>, _selectionSet?: SelectionSetNode): Prefixed_Response => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anABCType = (overrides?: Partial<ABCType>, _selectionSet?: SelectionSetNode): ABCType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as Prefixed_Response : aPrefixed_Response({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should generate mock data with typename if addTypename is true 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): { __typename: 'Avatar' } & Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {
        __typename: 'Avatar',        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): { __typename: 'User' } & User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {
        __typename: 'User',        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): { __typename: 'WithAvatar' } & WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {
        __typename: 'WithAvatar',        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): { __typename: 'camelCaseThing' } & CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {
        __typename: 'camelCaseThing',        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): { __typename: 'Prefixed_Response' } & PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {
        __typename: 'Prefixed_Response',        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): { __typename: 'ABCType' } & AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {
        __typename: 'ABCType',        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): { __typename: 'ListType' } & ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {
        __typename: 'ListType',        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): { __typename: 'Mutation' } & Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {
        __typename: 'Mutation',        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): { __typename: 'Query' } & Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {
        __typename: 'Query',        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should generate mock data with upperCase enum values if enumValues is "upper-case#upperCase" 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.ONLINE,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HASXYZSTATUS,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PREFIXED_VALUE,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should generate mock data with upperCase types and enums if typenames is "upper-case#upperCase" 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAVATAR = (overrides?: Partial<AVATAR>, _selectionSet?: SelectionSetNode): AVATAR => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUSER = (overrides?: Partial<USER>, _selectionSet?: SelectionSetNode): USER => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as AVATAR : anAVATAR({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : STATUS.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : ABCSTATUS.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CAMELCASETHING : aCAMELCASETHING({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as AVATAR : anAVATAR({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PREFIXED_ENUM.PrefixedValue,};
    };
export const aWITHAVATAR = (overrides?: Partial<WITHAVATAR>, _selectionSet?: SelectionSetNode): WITHAVATAR => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as AVATAR : anAVATAR({}, attributesSelectionSet?.avatar),};
    };
export const aCAMELCASETHING = (overrides?: Partial<CAMELCASETHING>, _selectionSet?: SelectionSetNode): CAMELCASETHING => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPREFIXED_RESPONSE = (overrides?: Partial<PREFIXED_RESPONSE>, _selectionSet?: SelectionSetNode): PREFIXED_RESPONSE => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anABCTYPE = (overrides?: Partial<ABCTYPE>, _selectionSet?: SelectionSetNode): ABCTYPE => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aLISTTYPE = (overrides?: Partial<LISTTYPE>, _selectionSet?: SelectionSetNode): LISTTYPE => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUPDATEUSERINPUT = (overrides?: Partial<UPDATEUSERINPUT>, _selectionSet?: SelectionSetNode): UPDATEUSERINPUT => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as AVATAR : anAVATAR({}, attributesSelectionSet?.avatar),};
    };
export const aMUTATION = (overrides?: Partial<MUTATION>, _selectionSet?: SelectionSetNode): MUTATION => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as USER : aUSER({}, attributesSelectionSet?.updateUser),};
    };
export const aQUERY = (overrides?: Partial<QUERY>, queryDocument?: DocumentNode): QUERY => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as USER : aUSER({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PREFIXED_RESPONSE : aPREFIXED_RESPONSE({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should generate mock data with upperCase types and imports if typenames is "upper-case#upperCase" 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
import { AVATAR, USER, WITHAVATAR, CAMELCASETHING, PREFIXED_RESPONSE, ABCTYPE, LISTTYPE, UPDATEUSERINPUT, MUTATION, QUERY, ABCSTATUS, STATUS, PREFIXED_ENUM } from './types/graphql';
export const anAVATAR = (overrides?: Partial<AVATAR>, _selectionSet?: SelectionSetNode): AVATAR => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUSER = (overrides?: Partial<USER>, _selectionSet?: SelectionSetNode): USER => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as AVATAR : anAVATAR({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : STATUS.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : ABCSTATUS.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CAMELCASETHING : aCAMELCASETHING({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as AVATAR : anAVATAR({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PREFIXED_ENUM.PrefixedValue,};
    };
export const aWITHAVATAR = (overrides?: Partial<WITHAVATAR>, _selectionSet?: SelectionSetNode): WITHAVATAR => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as AVATAR : anAVATAR({}, attributesSelectionSet?.avatar),};
    };
export const aCAMELCASETHING = (overrides?: Partial<CAMELCASETHING>, _selectionSet?: SelectionSetNode): CAMELCASETHING => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPREFIXED_RESPONSE = (overrides?: Partial<PREFIXED_RESPONSE>, _selectionSet?: SelectionSetNode): PREFIXED_RESPONSE => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anABCTYPE = (overrides?: Partial<ABCTYPE>, _selectionSet?: SelectionSetNode): ABCTYPE => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aLISTTYPE = (overrides?: Partial<LISTTYPE>, _selectionSet?: SelectionSetNode): LISTTYPE => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUPDATEUSERINPUT = (overrides?: Partial<UPDATEUSERINPUT>, _selectionSet?: SelectionSetNode): UPDATEUSERINPUT => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as AVATAR : anAVATAR({}, attributesSelectionSet?.avatar),};
    };
export const aMUTATION = (overrides?: Partial<MUTATION>, _selectionSet?: SelectionSetNode): MUTATION => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as USER : aUSER({}, attributesSelectionSet?.updateUser),};
    };
export const aQUERY = (overrides?: Partial<QUERY>, queryDocument?: DocumentNode): QUERY => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as USER : aUSER({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PREFIXED_RESPONSE : aPREFIXED_RESPONSE({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should generate multiple list elements 1`] = `
"import { Avatar, User, WithAvatar, CamelCaseThing, PrefixedResponse, AbcType, ListType, UpdateUserInput, Mutation, Query, AbcStatus, Status, PrefixedEnum } from './types/graphql';

export const anAvatar = (overrides?: Partial<Avatar>): Avatar => {
    return {
        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',
    };
};

export const aUser = (overrides?: Partial<User>): User => {
    return {
        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : anAvatar(),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : aCamelCaseThing(),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : anAvatar(),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,
    };
};

export const aWithAvatar = (overrides?: Partial<WithAvatar>): WithAvatar => {
    return {
        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : anAvatar(),
    };
};

export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>): CamelCaseThing => {
    return {
        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',
    };
};

export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>): PrefixedResponse => {
    return {
        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',
    };
};

export const anAbcType = (overrides?: Partial<AbcType>): AbcType => {
    return {
        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',
    };
};

export const aListType = (overrides?: Partial<ListType>): ListType => {
    return {
        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['id', 'soluta', 'quis'],
    };
};

export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>): UpdateUserInput => {
    return {
        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : anAvatar(),
    };
};

export const aMutation = (overrides?: Partial<Mutation>): Mutation => {
    return {
        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : aUser(),
    };
};

export const aQuery = (overrides?: Partial<Query>): Query => {
    return {
        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : aUser(),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : aPrefixedResponse(),
    };
};
"
`;

exports[`should generate single list element 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
import { Avatar, User, WithAvatar, CamelCaseThing, PrefixedResponse, AbcType, ListType, UpdateUserInput, Mutation, Query, AbcStatus, Status, PrefixedEnum } from './types/graphql';
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should not merge imports into one if enumsPrefix does not contain dots 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
import { Avatar, User, WithAvatar, CamelCaseThing, PrefixedResponse, AbcType, ListType, UpdateUserInput, Mutation, Query, ApiAbcStatus, ApiStatus, ApiPrefixedEnum } from './types/graphql';
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : ApiStatus.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : ApiAbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : ApiPrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should not merge imports into one if typesPrefix does not contain dots 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
import { ApiAvatar, ApiUser, ApiWithAvatar, ApiCamelCaseThing, ApiPrefixedResponse, ApiAbcType, ApiListType, ApiUpdateUserInput, ApiMutation, ApiQuery, AbcStatus, Status, PrefixedEnum } from './types/graphql';
export const anAvatar = (overrides?: Partial<ApiAvatar>, _selectionSet?: SelectionSetNode): ApiAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<ApiUser>, _selectionSet?: SelectionSetNode): ApiUser => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<ApiWithAvatar>, _selectionSet?: SelectionSetNode): ApiWithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<ApiCamelCaseThing>, _selectionSet?: SelectionSetNode): ApiCamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<ApiPrefixedResponse>, _selectionSet?: SelectionSetNode): ApiPrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<ApiAbcType>, _selectionSet?: SelectionSetNode): ApiAbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ApiListType>, _selectionSet?: SelectionSetNode): ApiListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<ApiUpdateUserInput>, _selectionSet?: SelectionSetNode): ApiUpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<ApiMutation>, _selectionSet?: SelectionSetNode): ApiMutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<ApiQuery>, queryDocument?: DocumentNode): ApiQuery => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should preserve underscores if transformUnderscore is false 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
import { Avatar, User, WithAvatar, CamelCaseThing, Prefixed_Response, AbcType, ListType, UpdateUserInput, Mutation, Query, AbcStatus, Status, Prefixed_Enum } from './types/graphql';
export const anAvatar = (overrides?: Partial<Avatar>, _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : Prefixed_Enum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixed_Response = (overrides?: Partial<Prefixed_Response>, _selectionSet?: SelectionSetNode): Prefixed_Response => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as Prefixed_Response : aPrefixed_Response({}, attributesSelectionSet?.prefixed_query),};
    };
"
`;

exports[`should use relationshipsToOmit argument to terminate circular relationships with terminateCircularRelationships enabled 1`] = `
"import { DocumentNode, FieldNode, SelectionSetNode } from 'graphql'
export const anAvatar = (overrides?: Partial<Avatar>, _relationshipsToOmit: Array<string> = [], _selectionSet?: SelectionSetNode): Avatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        const relationshipsToOmit = ([..._relationshipsToOmit, 'Avatar']);
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '0550ff93-dd31-49b4-8c38-ff1cb68bdc38',
        url: overrides && overrides.hasOwnProperty('url') ? overrides.url! : 'aliquid',};
    };
export const aUser = (overrides?: Partial<User>, _relationshipsToOmit: Array<string> = [], _selectionSet?: SelectionSetNode): User => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        const relationshipsToOmit = ([..._relationshipsToOmit, 'User']);
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : 'a5756f00-41a6-422a-8a7d-d13ee6a63750',
        creationDate: overrides && overrides.hasOwnProperty('creationDate') ? overrides.creationDate! : '1970-01-09T16:33:21.532Z',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'libero',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : relationshipsToOmit.includes('Avatar') || attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, relationshipsToOmit, attributesSelectionSet?.avatar),
        status: overrides && overrides.hasOwnProperty('status') ? overrides.status! : Status.Online,
        customStatus: overrides && overrides.hasOwnProperty('customStatus') ? overrides.customStatus! : AbcStatus.HasXyzStatus,
        scalarValue: overrides && overrides.hasOwnProperty('scalarValue') ? overrides.scalarValue! : 'neque',
        camelCaseThing: overrides && overrides.hasOwnProperty('camelCaseThing') ? overrides.camelCaseThing! : relationshipsToOmit.includes('CamelCaseThing') || attributesSelectionSet && !attributesSelectionSet.camelCaseThing ? {} as CamelCaseThing : aCamelCaseThing({}, relationshipsToOmit, attributesSelectionSet?.camelCaseThing),
        unionThing: overrides && overrides.hasOwnProperty('unionThing') ? overrides.unionThing! : relationshipsToOmit.includes('Avatar') || attributesSelectionSet && !attributesSelectionSet.unionThing ? {} as Avatar : anAvatar({}, relationshipsToOmit, attributesSelectionSet?.unionThing),
        prefixedEnum: overrides && overrides.hasOwnProperty('prefixedEnum') ? overrides.prefixedEnum! : PrefixedEnum.PrefixedValue,};
    };
export const aWithAvatar = (overrides?: Partial<WithAvatar>, _relationshipsToOmit: Array<string> = [], _selectionSet?: SelectionSetNode): WithAvatar => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        const relationshipsToOmit = ([..._relationshipsToOmit, 'WithAvatar']);
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '89f515e7-31e0-461d-a230-c4c7f4dafc5c',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : relationshipsToOmit.includes('Avatar') || attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, relationshipsToOmit, attributesSelectionSet?.avatar),};
    };
export const aCamelCaseThing = (overrides?: Partial<CamelCaseThing>, _relationshipsToOmit: Array<string> = [], _selectionSet?: SelectionSetNode): CamelCaseThing => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        const relationshipsToOmit = ([..._relationshipsToOmit, 'CamelCaseThing']);
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '345b9cf9-00fa-4974-800f-aeee5ee7fd42',};
    };
export const aPrefixedResponse = (overrides?: Partial<PrefixedResponse>, _relationshipsToOmit: Array<string> = [], _selectionSet?: SelectionSetNode): PrefixedResponse => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        const relationshipsToOmit = ([..._relationshipsToOmit, 'PrefixedResponse']);
        return {        ping: overrides && overrides.hasOwnProperty('ping') ? overrides.ping! : 'sunt',};
    };
export const anAbcType = (overrides?: Partial<AbcType>, _relationshipsToOmit: Array<string> = [], _selectionSet?: SelectionSetNode): AbcType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        const relationshipsToOmit = ([..._relationshipsToOmit, 'AbcType']);
        return {        abc: overrides && overrides.hasOwnProperty('abc') ? overrides.abc! : 'sit',};
    };
export const aListType = (overrides?: Partial<ListType>, _relationshipsToOmit: Array<string> = [], _selectionSet?: SelectionSetNode): ListType => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        const relationshipsToOmit = ([..._relationshipsToOmit, 'ListType']);
        return {        stringList: overrides && overrides.hasOwnProperty('stringList') ? overrides.stringList! : ['voluptatem'],};
    };
export const anUpdateUserInput = (overrides?: Partial<UpdateUserInput>, _relationshipsToOmit: Array<string> = [], _selectionSet?: SelectionSetNode): UpdateUserInput => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        const relationshipsToOmit = ([..._relationshipsToOmit, 'UpdateUserInput']);
        return {        id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : '1d6a9360-c92b-4660-8e5f-04155047bddc',
        login: overrides && overrides.hasOwnProperty('login') ? overrides.login! : 'qui',
        avatar: overrides && overrides.hasOwnProperty('avatar') ? overrides.avatar! : relationshipsToOmit.includes('Avatar') || attributesSelectionSet && !attributesSelectionSet.avatar ? {} as Avatar : anAvatar({}, relationshipsToOmit, attributesSelectionSet?.avatar),};
    };
export const aMutation = (overrides?: Partial<Mutation>, _relationshipsToOmit: Array<string> = [], _selectionSet?: SelectionSetNode): Mutation => {
        
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        const relationshipsToOmit = ([..._relationshipsToOmit, 'Mutation']);
        return {        updateUser: overrides && overrides.hasOwnProperty('updateUser') ? overrides.updateUser! : relationshipsToOmit.includes('User') || attributesSelectionSet && !attributesSelectionSet.updateUser ? {} as User : aUser({}, relationshipsToOmit, attributesSelectionSet?.updateUser),};
    };
export const aQuery = (overrides?: Partial<Query>, _relationshipsToOmit: Array<string> = [], queryDocument?: DocumentNode): Query => {
        const _selectionSet = queryDocument?.definitions[0].selectionSet;
        const attributesSelectionSet = _selectionSet ? Object.fromEntries((_selectionSet.selections as FieldNode[]).map((selection) => [selection.name?.value, selection.selectionSet ?? null])) : null;
        const relationshipsToOmit = ([..._relationshipsToOmit, 'Query']);
        return {        user: overrides && overrides.hasOwnProperty('user') ? overrides.user! : relationshipsToOmit.includes('User') || attributesSelectionSet && !attributesSelectionSet.user ? {} as User : aUser({}, relationshipsToOmit, attributesSelectionSet?.user),
        prefixed_query: overrides && overrides.hasOwnProperty('prefixed_query') ? overrides.prefixed_query! : relationshipsToOmit.includes('PrefixedResponse') || attributesSelectionSet && !attributesSelectionSet.prefixed_query ? {} as PrefixedResponse : aPrefixedResponse({}, relationshipsToOmit, attributesSelectionSet?.prefixed_query),};
    };
"
`;
