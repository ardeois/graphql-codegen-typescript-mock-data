// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should generate custom scalars for native and custom types using casual 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: 82,
        str: 'ea corrupti qui incidunt eius consequatur blanditiis',
        obj: aB(),
        anyObject: 'Kelly_Cremin@Turcotte.biz',
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        int: -93,
        flt: -24.509902694262564,
        bool: false,
        ...overrides,
    };
};
"
`;

exports[`should generate custom scalars for native and custom types using faker 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: 83,
        str: 'Corrupti qui incidunt eius consequatur qui.',
        obj: aB(),
        anyObject: 'Orlando64@gmail.com',
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        int: -93,
        flt: -24.51,
        bool: false,
        ...overrides,
    };
};
"
`;

exports[`should generate dynamic custom scalars for native and custom types using casual 1`] = `
"import casual from 'casual';

casual.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: casual['integer'](...[1,100]),
        str: casual['string'],
        obj: aB(),
        anyObject: casual['email'],
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        int: casual['integer'](...[-100,0]),
        flt: casual['double'](...[-100,0]),
        bool: false,
        ...overrides,
    };
};

export const seedMocks = (seed: number) => casual.seed(seed);
"
`;

exports[`should generate dynamic custom scalars for native and custom types using faker 1`] = `
"import { faker } from '@faker-js/faker';

faker.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        obj: aB(),
        anyObject: faker['internet']['email'](),
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        int: faker['datatype']['number'](...[{\\"min\\":-100,\\"max\\":0}]),
        flt: faker['datatype']['float'](...[{\\"min\\":-100,\\"max\\":0}]),
        bool: false,
        ...overrides,
    };
};

export const seedMocks = (seed: number) => faker.seed(seed);
"
`;
