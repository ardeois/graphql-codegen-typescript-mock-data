// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`per type field generation with casual with dynamic values can accept an extra function call 1`] = `
"import casual from 'casual';

casual.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['word'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual['integer'](...[1,100]).toFixed(),
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['word'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual.word,
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: casual['word'],
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => casual.seed(seed);
"
`;

exports[`per type field generation with casual with dynamic values can accept an extra function call with arguments 1`] = `
"import casual from 'casual';

casual.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['word'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual['integer'](...[1,100]).toFixed(...[3]),
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['word'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual.word,
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: casual['word'],
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => casual.seed(seed);
"
`;

exports[`per type field generation with casual with dynamic values can accept an extra function call with arguments shorthand 1`] = `
"import casual from 'casual';

casual.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['word'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual['integer'](...[1,100]).toFixed(...[3]),
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['word'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual.word,
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: casual['word'],
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => casual.seed(seed);
"
`;

exports[`per type field generation with casual with dynamic values can accept arguments 1`] = `
"import casual from 'casual';

casual.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['word'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual['integer'](...[1,100]),
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['word'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual.word,
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: casual['word'],
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => casual.seed(seed);
"
`;

exports[`per type field generation with casual with dynamic values can apply generator override to all fields of a specific name 1`] = `
"import casual from 'casual';

casual.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['email'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual.word,
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['email'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual.word,
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: casual['word'],
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => casual.seed(seed);
"
`;

exports[`per type field generation with casual with dynamic values can overwrite a scalar value 1`] = `
"import casual from 'casual';

casual.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['email'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual.word,
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['word'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual.word,
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: casual['word'],
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => casual.seed(seed);
"
`;

exports[`per type field generation with casual with dynamic values can overwrite an enum value 1`] = `
"import casual from 'casual';

casual.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['word'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual.word,
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['word'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual.word,
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: casual['word'],
        enum: casual['email'],
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => casual.seed(seed);
"
`;

exports[`per type field generation with casual with dynamic values can overwrite an enum value when enumsAsTypes is true 1`] = `
"import casual from 'casual';

casual.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['word'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual.word,
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['word'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual.word,
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: casual['word'],
        enum: casual['email'],
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => casual.seed(seed);
"
`;

exports[`per type field generation with casual with dynamic values uses per field generation if field name matches 1`] = `
"import casual from 'casual';

casual.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['email'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual.word,
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: casual['word'],
        email: casual['word'],
        date: casual['date'](),
        overriddenDate: casual['date'](),
        dateTime: casual.word,
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: casual['word'],
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => casual.seed(seed);
"
`;

exports[`per type field generation with casual without dynamic values can accept an extra function call 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: 'ea',
        email: 'vero',
        date: '2004-01-01',
        overriddenDate: '1995-09-05',
        dateTime: '39',
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: 'consectetur',
        email: 'quibusdam',
        date: '1980-12-10',
        overriddenDate: '2014-12-19',
        dateTime: 'ut',
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: 'voluptas',
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};
"
`;

exports[`per type field generation with casual without dynamic values can accept an extra function call with arguments 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: 'ea',
        email: 'vero',
        date: '2004-01-01',
        overriddenDate: '1995-09-05',
        dateTime: '39.000',
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: 'consectetur',
        email: 'quibusdam',
        date: '1980-12-10',
        overriddenDate: '2014-12-19',
        dateTime: 'ut',
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: 'voluptas',
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};
"
`;

exports[`per type field generation with casual without dynamic values can accept an extra function call with arguments shorthand 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: 'ea',
        email: 'vero',
        date: '2004-01-01',
        overriddenDate: '1995-09-05',
        dateTime: '39.000',
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: 'consectetur',
        email: 'quibusdam',
        date: '1980-12-10',
        overriddenDate: '2014-12-19',
        dateTime: 'ut',
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: 'voluptas',
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};
"
`;

exports[`per type field generation with casual without dynamic values can accept arguments 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: 'ea',
        email: 'vero',
        date: '2004-01-01',
        overriddenDate: '1995-09-05',
        dateTime: 39,
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: 'consectetur',
        email: 'quibusdam',
        date: '1980-12-10',
        overriddenDate: '2014-12-19',
        dateTime: 'ut',
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: 'voluptas',
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};
"
`;

exports[`per type field generation with casual without dynamic values can apply generator override to all fields of a specific name 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: 'ea',
        email: 'Schuppe.Demario@yahoo.com',
        date: '2004-01-01',
        overriddenDate: '1995-09-05',
        dateTime: 'vel',
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: 'consectetur',
        email: 'Molly.Wuckert@gmail.com',
        date: '1980-12-10',
        overriddenDate: '2014-12-19',
        dateTime: 'ut',
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: 'voluptas',
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};
"
`;

exports[`per type field generation with casual without dynamic values can overwrite a scalar value 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: 'ea',
        email: 'Schuppe.Demario@yahoo.com',
        date: '2004-01-01',
        overriddenDate: '1995-09-05',
        dateTime: 'vel',
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: 'consectetur',
        email: 'quibusdam',
        date: '1980-12-10',
        overriddenDate: '2014-12-19',
        dateTime: 'ut',
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: 'voluptas',
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};
"
`;

exports[`per type field generation with casual without dynamic values can overwrite an enum value 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: 'ea',
        email: 'vero',
        date: '2004-01-01',
        overriddenDate: '1995-09-05',
        dateTime: 'vel',
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: 'consectetur',
        email: 'quibusdam',
        date: '1980-12-10',
        overriddenDate: '2014-12-19',
        dateTime: 'ut',
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: 'voluptas',
        enum: 'Roosevelt.Oberbrunner@gmail.com',
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};
"
`;

exports[`per type field generation with casual without dynamic values can overwrite an enum value when enumsAsTypes is true 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: 'ea',
        email: 'vero',
        date: '2004-01-01',
        overriddenDate: '1995-09-05',
        dateTime: 'vel',
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: 'consectetur',
        email: 'quibusdam',
        date: '1980-12-10',
        overriddenDate: '2014-12-19',
        dateTime: 'ut',
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: 'voluptas',
        enum: 'Roosevelt.Oberbrunner@gmail.com',
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};
"
`;

exports[`per type field generation with casual without dynamic values uses per field generation if field name matches 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: datatype.integer,
        str: 'ea',
        email: 'Schuppe.Demario@yahoo.com',
        date: '2004-01-01',
        overriddenDate: '1995-09-05',
        dateTime: 'vel',
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: datatype.integer,
        str: 'consectetur',
        email: 'quibusdam',
        date: '1980-12-10',
        overriddenDate: '2014-12-19',
        dateTime: 'ut',
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: datatype.integer,
        str: 'voluptas',
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};
"
`;

exports[`per type field generation with faker with dynamic values can accept an extra function call 1`] = `
"import { faker } from '@faker-js/faker';

faker.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker['date']['recent'](...[10]).toLocaleDateString(),
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => faker.seed(seed);
"
`;

exports[`per type field generation with faker with dynamic values can accept an extra function call with arguments 1`] = `
"import { faker } from '@faker-js/faker';

faker.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker['date']['recent'](...[10]).toLocaleDateString(...[\\"en-GB\\"]),
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => faker.seed(seed);
"
`;

exports[`per type field generation with faker with dynamic values can accept an extra function call with arguments shorthand 1`] = `
"import { faker } from '@faker-js/faker';

faker.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker['date']['recent'](...[10]).toLocaleDateString(...[\\"en-GB\\"]),
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => faker.seed(seed);
"
`;

exports[`per type field generation with faker with dynamic values can accept arguments 1`] = `
"import { faker } from '@faker-js/faker';

faker.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker['date']['recent'](...[10]),
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => faker.seed(seed);
"
`;

exports[`per type field generation with faker with dynamic values can apply generator override to all fields of a specific name 1`] = `
"import { faker } from '@faker-js/faker';

faker.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['internet']['email'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['internet']['email'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => faker.seed(seed);
"
`;

exports[`per type field generation with faker with dynamic values can overwrite a nested value with null 1`] = `
"import { faker } from '@faker-js/faker';

faker.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: null,
        ...overrides,
    };
};

export const seedMocks = (seed: number) => faker.seed(seed);
"
`;

exports[`per type field generation with faker with dynamic values can overwrite a nested value with null when terminateCircularRelationships is true 1`] = `
"import { faker } from '@faker-js/faker';

faker.seed(0);

export const anA = (overrides?: Partial<A>, _relationshipsToOmit: Set<string> = new Set()): A => {
    const relationshipsToOmit: Set<string> = new Set(_relationshipsToOmit);
    relationshipsToOmit.add('A');
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>, _relationshipsToOmit: Set<string> = new Set()): B => {
    const relationshipsToOmit: Set<string> = new Set(_relationshipsToOmit);
    relationshipsToOmit.add('B');
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>, _relationshipsToOmit: Set<string> = new Set()): C => {
    const relationshipsToOmit: Set<string> = new Set(_relationshipsToOmit);
    relationshipsToOmit.add('C');
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>, _relationshipsToOmit: Set<string> = new Set()): D => {
    const relationshipsToOmit: Set<string> = new Set(_relationshipsToOmit);
    relationshipsToOmit.add('D');
    return {
        nested: null,
        ...overrides,
    };
};

export const seedMocks = (seed: number) => faker.seed(seed);
"
`;

exports[`per type field generation with faker with dynamic values can overwrite a scalar value 1`] = `
"import { faker } from '@faker-js/faker';

faker.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['internet']['email'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['past'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => faker.seed(seed);
"
`;

exports[`per type field generation with faker with dynamic values can overwrite an enum value 1`] = `
"import { faker } from '@faker-js/faker';

faker.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        enum: faker['helpers']['arrayElement'](...[[\\"active\\",\\"disabled\\"]]),
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => faker.seed(seed);
"
`;

exports[`per type field generation with faker with dynamic values can overwrite an enum value when enumsAsTypes is true 1`] = `
"import { faker } from '@faker-js/faker';

faker.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        enum: faker['helpers']['arrayElement'](...[[\\"active\\",\\"disabled\\"]]),
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => faker.seed(seed);
"
`;

exports[`per type field generation with faker with dynamic values uses per field generation if field name matches 1`] = `
"import { faker } from '@faker-js/faker';

faker.seed(0);

export const anA = (overrides?: Partial<A>): A => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['internet']['email'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        email: faker['lorem']['sentence'](),
        date: faker['date']['future'](),
        overriddenDate: faker['date']['future'](),
        dateTime: faker.lorem.word(),
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: faker['datatype']['number'](...[{\\"min\\":1,\\"max\\":100}]),
        str: faker['lorem']['sentence'](),
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};

export const seedMocks = (seed: number) => faker.seed(seed);
"
`;

exports[`per type field generation with faker without dynamic values can accept an extra function call 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: 1,
        str: 'A sentence',
        email: 'A sentence',
        date: \\"2050-01-01T00:00:00.000Z\\",
        overriddenDate: \\"2050-01-01T00:00:00.000Z\\",
        dateTime: '1/1/2022',
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: 1,
        str: 'A sentence',
        email: 'A sentence',
        date: \\"2050-01-01T00:00:00.000Z\\",
        overriddenDate: \\"2050-01-01T00:00:00.000Z\\",
        dateTime: 'Word',
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: 1,
        str: 'A sentence',
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};
"
`;

exports[`per type field generation with faker without dynamic values can accept an extra function call with arguments 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: 1,
        str: 'A sentence',
        email: 'A sentence',
        date: \\"2050-01-01T00:00:00.000Z\\",
        overriddenDate: \\"2050-01-01T00:00:00.000Z\\",
        dateTime: '01/01/2022',
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: 1,
        str: 'A sentence',
        email: 'A sentence',
        date: \\"2050-01-01T00:00:00.000Z\\",
        overriddenDate: \\"2050-01-01T00:00:00.000Z\\",
        dateTime: 'Word',
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: 1,
        str: 'A sentence',
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};
"
`;

exports[`per type field generation with faker without dynamic values can accept arguments 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: 1,
        str: 'A sentence',
        email: 'A sentence',
        date: \\"2050-01-01T00:00:00.000Z\\",
        overriddenDate: \\"2050-01-01T00:00:00.000Z\\",
        dateTime: \\"2022-01-01T00:00:00.000Z\\",
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: 1,
        str: 'A sentence',
        email: 'A sentence',
        date: \\"2050-01-01T00:00:00.000Z\\",
        overriddenDate: \\"2050-01-01T00:00:00.000Z\\",
        dateTime: 'Word',
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: 1,
        str: 'A sentence',
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};
"
`;

exports[`per type field generation with faker without dynamic values can apply generator override to all fields of a specific name 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: 1,
        str: 'A sentence',
        email: 'my@email.com',
        date: \\"2050-01-01T00:00:00.000Z\\",
        overriddenDate: \\"2050-01-01T00:00:00.000Z\\",
        dateTime: 'Word',
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: 1,
        str: 'A sentence',
        email: 'my@email.com',
        date: \\"2050-01-01T00:00:00.000Z\\",
        overriddenDate: \\"2050-01-01T00:00:00.000Z\\",
        dateTime: 'Word',
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: 1,
        str: 'A sentence',
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};
"
`;

exports[`per type field generation with faker without dynamic values can overwrite a scalar value 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: 1,
        str: 'A sentence',
        email: 'my@email.com',
        date: \\"2050-01-01T00:00:00.000Z\\",
        overriddenDate: \\"2020-01-01T00:00:00.000Z\\",
        dateTime: 'Word',
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: 1,
        str: 'A sentence',
        email: 'A sentence',
        date: \\"2050-01-01T00:00:00.000Z\\",
        overriddenDate: \\"2050-01-01T00:00:00.000Z\\",
        dateTime: 'Word',
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: 1,
        str: 'A sentence',
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};
"
`;

exports[`per type field generation with faker without dynamic values can overwrite an enum value 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: 1,
        str: 'A sentence',
        email: 'A sentence',
        date: \\"2050-01-01T00:00:00.000Z\\",
        overriddenDate: \\"2050-01-01T00:00:00.000Z\\",
        dateTime: 'Word',
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: 1,
        str: 'A sentence',
        email: 'A sentence',
        date: \\"2050-01-01T00:00:00.000Z\\",
        overriddenDate: \\"2050-01-01T00:00:00.000Z\\",
        dateTime: 'Word',
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: 1,
        str: 'A sentence',
        enum: 'my@email.com',
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};
"
`;

exports[`per type field generation with faker without dynamic values can overwrite an enum value when enumsAsTypes is true 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: 1,
        str: 'A sentence',
        email: 'A sentence',
        date: \\"2050-01-01T00:00:00.000Z\\",
        overriddenDate: \\"2050-01-01T00:00:00.000Z\\",
        dateTime: 'Word',
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: 1,
        str: 'A sentence',
        email: 'A sentence',
        date: \\"2050-01-01T00:00:00.000Z\\",
        overriddenDate: \\"2050-01-01T00:00:00.000Z\\",
        dateTime: 'Word',
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: 1,
        str: 'A sentence',
        enum: 'my@email.com',
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};
"
`;

exports[`per type field generation with faker without dynamic values uses per field generation if field name matches 1`] = `
"
export const anA = (overrides?: Partial<A>): A => {
    return {
        id: 1,
        str: 'A sentence',
        email: 'my@email.com',
        date: \\"2050-01-01T00:00:00.000Z\\",
        overriddenDate: \\"2050-01-01T00:00:00.000Z\\",
        dateTime: 'Word',
        ...overrides,
    };
};

export const aB = (overrides?: Partial<B>): B => {
    return {
        id: 1,
        str: 'A sentence',
        email: 'A sentence',
        date: \\"2050-01-01T00:00:00.000Z\\",
        overriddenDate: \\"2050-01-01T00:00:00.000Z\\",
        dateTime: 'Word',
        ...overrides,
    };
};

export const aC = (overrides?: Partial<C>): C => {
    return {
        id: 1,
        str: 'A sentence',
        enum: EnumExample.Lorem,
        ...overrides,
    };
};

export const aD = (overrides?: Partial<D>): D => {
    return {
        nested: aC(),
        ...overrides,
    };
};
"
`;
